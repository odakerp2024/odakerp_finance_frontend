import { DatePipe } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { CreditReviseRevokeService } from 'src/app/services/financeModule/credit-revise-revoke.service';
import Swal from 'sweetalert2';
import { CommonService } from 'src/app/services/common.service';
import { AutoCodeService } from 'src/app/services/auto-code.service';
import * as ReviseRevokeType from './credit-revise-revoke-info.modle'

@Component({
  selector: 'app-credit-revise-revoke-info',
  templateUrl: './credit-revise-revoke-info.component.html',
  styleUrls: ['./credit-revise-revoke-info.component.css']
})
export class CreditReviseRevokeInfoComponent implements OnInit {

  ModifiedOn: string = "";
  ModifiedBy: string = "";
  CreatedBy: string = "";
  CreatedOn: string = "";
  FileList: any = [];
  isUpdateMode: Boolean = false;
  creditType: string = "Revise";
  CreditReviewId: any;
  reviseAndRevokeForm: FormGroup;
  CreditReveiwType: any;
  maxDate = new Date();
  entityDateFormat = this.commonService.getLocalStorageEntityConfigurable('DateFormat')
  CreditReviseReviewId: string | number;
  documentList: any[] = [];
  divisionList: any[];
  officeList: any[];
  documentInfo = [];
  isEditMode = true;
  isUpdate = false;
  autoGenerateCodeList: any;
  paymentAutoGeneratedDetails: any;
  UpdatedBy: any;
  userId = localStorage.getItem('UserID')
  ReviseRevokeType = ReviseRevokeType;
  statusValues = [
    { value: 1, viewValue: 'Yes' },
    { value: 0, viewValue: 'No' },
  ]
  ApplictionStatusList = [];
  CustomerList = [];
  CustomerBranchList = [];
  SalesPersonList = [];
  creditLimit: any;
  isFinaled = false;
  SalesPersionPIC: any;
  constructor(
    private fb: FormBuilder,
    private route: ActivatedRoute,
    private creditReviseRevokeService: CreditReviseRevokeService,
    private datePipe: DatePipe,
    public commonService: CommonService,
    private autoCodeService: AutoCodeService,
    private router: Router,
  ) {
    this.createCreditReviseAndRevokeForm();
  }

  ngOnInit(): void {
    this.getDropdown();
    this.getNumberRange()
    this.getDivisionList();
    this.getOfficeList();
    this.getCustomerCredit();
    this.route.queryParams.subscribe((params) => {

      this.CreditReviewId = +params['CreditReviewId'] ? params['CreditReviewId'] : 0;
      this.CreditReveiwType = params['type'] ? params['type'] : '';
      this.CreditReviseReviewId = +params['Id'] ? +params['Id'] : 0;

      if (this.CreditReviewId) {
        this.getByReviewId();
      }

      if (this.CreditReviseReviewId) {
        this.reviseAndRevokeForm.disable();
        this.isEditMode = false;
        this.isUpdate = true;
        this.getById();
      } else {
        this.isUpdate = false
      }
    });
  }

  // Create a FormGroup with empty arrays for the object
  createCreditReviseAndRevokeForm() {
    this.reviseAndRevokeForm = this.fb.group({
      CreditReviseAndRevokeId: [0],
      PreviousApplicationNumber: [],
      IsRevise: [true],
      IsRevoke: [false],
      IsTemp: [true],
      IsPermanent: [false],
      NewApplicationNumber: [''],
      ApplicationDate: [this.maxDate],
      StatusId: [22], // need to check 
      CustomerId: [0],
      CustomerBranchId: [],
      CustomerPrimaryContact: [],
      DivisionId: [''],
      OfficeId: [''],
      SalesPersonId: [''],
      CurrentCreditLimitDays: [],
      CurrentCreditLimitAmount: [],
      CurrentPostDatedCheque: [''],
      ProposedCreditLimitDays: [''],
      ProposedCreditLimitAmount: [''],
      ProposedPostDatedCheque: [''],  // missing
      Remarks: [''],
      ReasonForRevoking: [],
      CreatedBy: [this.userId],
      RevisionTill: [''],
      ApplicationType: ['']
    });
  }

  fileSelected(event) {
    if (event.target.files.length > 0 && this.FileList.length < 5) {
      this.FileList.push({
        Id: 0,
        PurchaseInvoiceId: 0,
        FileName: event.target.files[0].name,
        FilePath: event.target.files[0].name
      })
    }
    else {
      Swal.fire('A maximum of five files must be allowed.');
    }
  }


  OnClickDeleteValueFile(index: number) {
    this.FileList.splice(index, 1);
  }


  getDivisionList() {
    return new Promise((resolve, rejects) => {
      this.commonService.getDivision({}).subscribe((result: any) => {
        this.divisionList = [];
        if (result.data.Table.length > 0) {
          this.divisionList = result.data.Table;
          resolve(true);
        }
      }, error => {
        rejects(true)
      });;
    });
  }


  getOfficeList() {
    this.commonService.getOffice({}).subscribe((result: any) => {
      this.officeList = [];
      if (result.message == 'Success' && result.data.Office.length > 0) {
        this.officeList = result.data.Office.filter(x => x.Active == true);
      }
    }, error => { });
  }


  getByReviewId() {
    const payload = {
      "CreditReviewId": this.CreditReviewId
    }
    this.creditReviseRevokeService.getByReviewId(payload).subscribe( async (result: any) => {
      if (result.message == 'Success') {
        const resultData = result.data.Table[0];
        this.SalesPersionPIC = result.data.Table[0].SalesPersonId
        // "PreviousApplicationNumber": "123ASD6754",
        // "ApplicationDate": "2023-08-04T00:00:00",
        // "Status": 1,
        // "CustomerId": 14,
        // "CustomertBranchId": 1,
        // "CustomerPrimeContact": "",
        // "DivisionId": 12,
        // "OfficeId": 12, 
        // "SalesPersonId": 1,
        // "CurrentCreditLimitDays": "",
        // "CurrentCreditLimitAmount": 1000.0000000000,
        // "CurrentPostDatedCheques": true
        await this.getSalesList(resultData.CustomertBranchId);
        this.reviseAndRevokeForm.patchValue({
          // CreditReviseAndRevokeId: this.CreditReviseReviewId,
          PreviousApplicationNumber: resultData.PreviousApplicationNumber,
          // IsRevise: [],
          // IsRevoke: [],
          // IsTemp: [],
          // IsPermanent: [],
          // NewApplicationNumber: [],
          ApplicationDate: resultData.ApplicationDate ?? this.maxDate,
          // StatusId: resultData.Status,
          CustomerId: resultData.CustomerId,
          CustomerBranchId: resultData.CustomertBranchId, // change the spelling
          CustomerPrimaryContact: resultData.CustomerPrimeContact,
          DivisionId: resultData.DivisionId,
          OfficeId: resultData.OfficeId,
          SalesPersonId: resultData.SalesPIC,
          CurrentCreditLimitDays: resultData.CurrentCreditLimitDays,
          CurrentCreditLimitAmount: resultData.CurrentCreditLimitAmount,
          CurrentPostDatedCheque:resultData.CurrentPostDatedCheque? 1 : 0,
          // ProposedCreditLimitDays: resultData.ProposedCreditLimitDays,
          // ProposedCreditLimitAmount:resultData.ProposedCreditLimitAmount,
          ProposedPostDatedCheque: resultData.ProposedPostDatedCheque ? 1 : 0,  // missing
          // Remarks: [],
          // ReasonForRevoking: [],
          // CreatedBy: [],
        })
        if(this.CreditReveiwType == 'revoke'){
          this.setRevoke();
          // ! clear the proprosed fields
          this.reviseAndRevokeForm.patchValue({
            "ProposedCreditLimitDays": 0,
            "ProposedCreditLimitAmount": 0,
            "ProposedPostDatedCheque": false,
            "ApplicationType": "1"
          })
        } else {
          this.setRevise();
        }
        this.getCustomerCredit();
      }
    })
  }


  constructPayload() {
    const payload = {
      "CreditReviseAndRevoke": {
        "Table": [this.reviseAndRevokeForm.value],
        "Table1": [...this.documentList]
      }
    }
    return payload;
  }


  checkValidation() {
    const reviseAndRevokeForm = this.reviseAndRevokeForm.value;
    var validation = "";

    if (!reviseAndRevokeForm.PreviousApplicationNumber && this.CreditReviewId) {
      validation += "<span style='color:red;'>*</span> <span>Auto Generate Code</span></br>"
    }

    if (!reviseAndRevokeForm.NewApplicationNumber) {
      validation += "<span style='color:red;'>*</span> <span>Auto Generate Code</span></br>"
    }

    if (!reviseAndRevokeForm.ApplicationDate) {
      validation += "<span style='color:red;'>*</span> <span>Application Date</span></br>"
    }
    

    // if (!reviseAndRevokeForm.StatusId) {
    //   validation += "<span style='color:red;'>*</span> <span>Status Required </span></br>"
    // }

    if (!reviseAndRevokeForm.CustomerId) {
      validation += "<span style='color:red;'>*</span> <span>Please Select Customer </span></br>"
    }

    if (!reviseAndRevokeForm.CustomerBranchId) {
      validation += "<span style='color:red;'>*</span> <span>Enter Customer Branch </span></br>"
    }

    // if (!reviseAndRevokeForm.CustomerPrimaryContact) {
    //   validation += "<span style='color:red;'>*</span> <span>Enter Customer Primary Constact </span></br>"
    // }

    if (!reviseAndRevokeForm.DivisionId) {
      validation += "<span style='color:red;'>*</span> <span>Please Select Division </span></br>"
    }

    if (!reviseAndRevokeForm.OfficeId) {
      validation += "<span style='color:red;'>*</span> <span>Please Select Office </span></br>"
    }

    // if (!reviseAndRevokeForm.SalesPersonId) {
    //   validation += "<span style='color:red;'>*</span> <span>Please Select Sales Person </span></br>"
    // }



    //  If type is Revise
    if (reviseAndRevokeForm.IsRevise) {


    if (reviseAndRevokeForm.ProposedCreditLimitDays == '') {
      validation += "<span style='color:red;'>*</span> <span>Please Select Proposed Days</span></br>"
    }

      if (reviseAndRevokeForm.ProposedCreditLimitAmount == '') {
        validation += "<span style='color:red;'>*</span> <span>Please Select Proposed Amount</span></br>"
      }

      if (reviseAndRevokeForm.ProposedPostDatedCheque == '') {
        validation += "<span style='color:red;'>*</span> <span>Please Select Proposed Dated Cheque</span></br>"
      }

      if (reviseAndRevokeForm.RevisionTill == '') {
        validation += "<span style='color:red;'>*</span> <span>Please Select Revision Till Date</span></br>"
      }

    }

     //  If type is Revoke
    if (reviseAndRevokeForm.IsRevoke) {
      if (!reviseAndRevokeForm.ReasonForRevoking) {
        validation += "<span style='color:red;'>*</span> <span>Enter Reason For Revoking</span></br>"
      }
    }

    return validation;

  }

  save() {
    const payload = this.constructPayload();
    this.reviseAndRevokeForm.value.SalesPersonId = this.SalesPersionPIC
    this.creditReviseRevokeService.SaveReviseAndRevoke(payload).subscribe((result: any) => {
      if (result.message === 'Success') {
        Swal.fire(result.data);
        if (!this.isUpdate) {
          this.updateAutoGenerated();
        }
        this.router.navigate(['/views/credit-Review/credit-revoke']);
      }
    });
  }


  // setPending Approval
  setSubmitStatus(State = 22) {
  //   {
  //     "Id": 22,
  //     "Status": "Draft"
  // },
  // {
  //     "Id": 23,
  //     "Status": "Pending Approval"
  // },
  // {
  //     "Id": 24,
  //     "Status": "Approved"
  // },
  // {
  //     "Id": 25,
  //     "Status": "Rejected"
  // }
    this.reviseAndRevokeForm.controls.StatusId.setValue(State); // set status as => Pending Approval
  }

  //  * credit save
 async confirmFunction(type) {
    if(this.reviseAndRevokeForm.value.NewApplicationNumber == ''){
      const code =  await this.getAutoCodeGeneration();
    }
    
    // console.log('after');
    const validation = this.checkValidation();
    // *  validation check
    if (validation != '') {
      Swal.fire(validation);
      return;
    }

    Swal.fire({
      showCloseButton: true,
      title: '',
      icon: 'question',
      text: `Do you want to save this Details?`,
      showCancelButton: true,
      confirmButtonText: 'Yes',
      cancelButtonText: 'No',
      reverseButtons: false,
      allowOutsideClick: false
    }).then(async (result) => {
      if (result.isConfirmed) {
        switch (type) {
          case ReviseRevokeType.SAVE_TYPE:
            this.setSubmitStatus();
            this.save();
            break;
          case ReviseRevokeType.SUBMIT_TYPE:
            this.setSubmitStatus(24);
            this.save();
            break;
          default:
            break;
        }
      }
    });
  }

  // This function is called when the "Temp" radio button is clicked
  setTemp() {
    this.reviseAndRevokeForm.patchValue({
      IsTemp: true,
      IsPermanent: false,
    });
  }

  // This function is called when the "Permanent" radio button is clicked
  setPermanent() {
    this.reviseAndRevokeForm.patchValue({
      IsTemp: false,
      IsPermanent: true,
    });
  }

  // Function to handle the "Temp" radio button click
  setRevise() {
    this.creditType = 'Revise';
    this.reviseAndRevokeForm.patchValue({
      IsRevise: true,
      IsRevoke: false,
    });
  }

  // Function to handle the "Revoke" radio button click
  setRevoke() {
    this.creditType = 'Revoke';
    this.reviseAndRevokeForm.patchValue({
      IsRevise: false,
      IsRevoke: true,
    });
  }

  uploadDocument(event: any) {
    const paymentRequestForm = this.reviseAndRevokeForm.value;
    if (event) {
      this.documentList.push({
        Id: 0,
        CreditReviseAndRevokeId: paymentRequestForm.CreditReviseAndRevokeId,
        DocumentName: event.DocumentName,
        FilePath: event.FilePath
      });
    }
  }

  deleteDocument(deleteData) {
    if (!this.isEditMode) {
      Swal.fire("Please Click Edit Button to Delete");
      return;
    }
    const index = this.documentList.findIndex((element) => element.BankAttachmentsID == deleteData.BankAttachmentsID);
    this.documentList.splice(index, 1);

  }

  enableEdit() {
    this.reviseAndRevokeForm.enable();
    this.isEditMode = true;
  }


  getNumberRange() {
    this.autoCodeService.getNumberRange().then((result) => {
      if (result) {
        this.autoGenerateCodeList = result
        this.paymentAutoGeneratedDetails = this.autoGenerateCodeList.filter(x => x.ObjectName == "Credit Revise And Revoke");
      }
    });
  }

  async getAutoCodeGeneration() {
    const Table = this.reviseAndRevokeForm.value;
    return new Promise((resolve, rejects) => {
      if (!this.isUpdate) {
        const code = this.autoCodeService.autoCodeGeneration('Credit Revise And Revoke', this.paymentAutoGeneratedDetails, this.officeList, this.divisionList, Table.DivisionId, Table.OfficeId)
        code.then((code) => {
          if (!code) {
            Swal.fire('Please create the auto-generation code for Credit Revise / Revoke.')
            resolve(false);
          }
          else {
            this.reviseAndRevokeForm.controls['NewApplicationNumber'].setValue(code);
            resolve(true);
            // console.log('before')
          }
        })
      }
    });
  }

  updateAutoGenerated() {
    if (this.paymentAutoGeneratedDetails.length > 0) {
      this.autoCodeService.updateAutoGenerated(this.paymentAutoGeneratedDetails).then((result) => {
        if (result === 'Success') {
          // console.log('auto code generation updated successfully');
        }
      })
    }
  }

  getById() {
    const payload = {
      CreditReviseAndRevokeId: this.CreditReviseReviewId
    };
    this.creditReviseRevokeService.getById(payload).subscribe((result: any) => {
      if (result.message == 'Success') {
        const formData = result.data.Table[0];
        this.SalesPersionPIC = result.data.Table[0].SalesPersonId
        // update the history
        this.CreatedOn = formData.CreatedDate;
        this.ModifiedOn = formData.UpdatedDate;
        this.CreatedBy = formData.CreatedByName;
        this.UpdatedBy = formData.UpdatedByName

        this.documentList = result.data.Table1;
        this.reviseAndRevokeForm.patchValue({
          CreditReviseAndRevokeId: this.CreditReviseReviewId,
          ...formData,
          SalesPersonId : result.data.Table[0].SalesPIC,
          CurrentPostDatedCheque:result.data.Table[0].CurrentPostDatedCheque? 1 : 0,

          ProposedPostDatedCheque: result.data.Table[0].ProposedPostDatedCheque ? 1 : 0,  

        });
        this.getCustomerCredit();
        if(this.reviseAndRevokeForm.value.StatusId == 24){
          this.isFinaled = true;
        }
        this.setReviseOrRevoke(formData)
      }
    })
  }

  // Function to set "IsRevise" and "IsRevoke" based on formData.IsRevise
  setReviseOrRevoke(formData) {
    if (formData.IsRevise) {
      this.setRevise();
      this.setTempOrPermanent(formData)
    } else {
      this.setRevoke();
    }
  }

  // Function to handle radio button click based on formData.IsTemp
  setTempOrPermanent(formData) {
    if (formData.IsTemp) {
      this.setTemp();
    } else {
      this.setPermanent();
    }
  }


  getDropdown(){
    this.creditReviseRevokeService.getDropdown({}).subscribe((result: any) => {
      if (result.message == 'Success' ){
        this.ApplictionStatusList = result.data.Table;
        this.CustomerList = result.data.Table2;
        this.CustomerBranchList = result.data.Table3;
        // this.SalesPersonList = result.data.Table;
      }
    })
  }

  getSalesList(BranchId){
    // this.reviseRevokeFilterForm.value.CustomerBranchId
    const payload = {
      CustomerBranchId: 3
    };

    this.creditReviseRevokeService.getSalesPerson(payload).subscribe((result: any) => {
      if (result.message == 'Success' ){
        this.SalesPersonList = result.data.Table;
      }
    });
  }


  // getCustomerCredit() {
  //   this.commonService.getCustomerCreditList({}).subscribe((result: any) => {
  //     if(result.message == 'Success') {
  //       this.creditLimit = result.data.Table;
  //     }
  //   })
  // }

  getCustomerCredit(){
    const Table = this.reviseAndRevokeForm.value;
    const payload = {
      "Division" : +Table.DivisionId
    };
    this.creditReviseRevokeService.getQuestionAndDropdown(payload).subscribe((result: any) => {
      if (result.message == 'Success') {
        this.creditLimit = result.data.Table2;
    }}, error => {
      
    })
  }

// Table1 => appli type


}
