import { DatePipe } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { Globals } from 'src/app/globals';
import { Status, StatusView } from 'src/app/model/common';
import { AutoCodeService } from 'src/app/services/auto-code.service';
import { CommonService } from 'src/app/services/common.service';
import { DataService } from 'src/app/services/data.service';
import Swal from 'sweetalert2';

@Component({
  selector: 'app-coa-type-info',
  templateUrl: './coa-type-info.component.html',
  styleUrls: ['./coa-type-info.component.css'],
  providers: [DatePipe]
})
export class CoaTypeInfoComponent implements OnInit {


  CreatedOn: string = '';
  CreatedBy: string = '';
  ModifiedOn: string = '';
  ModifiedBy: string = '';

  coaForm: FormGroup;
  isCreate: Boolean = true;
  coaId: any;
  isUpdate: Boolean = false;
  payload: { COAType: { Table: any[]; }; };
  coaGroupList: any;
  isUpdateButtonDisable: boolean = true;
  statusvalues: Status[] = new StatusView().statusvalues;
  autoGenerateCodeList: any;
  entityDateFormat = this.commonDataService.getLocalStorageEntityConfigurable('DateFormat');


  constructor(
    private router: Router,
    private dataService: DataService,
    private globals: Globals,
    private fb: FormBuilder,
    private route: ActivatedRoute,
    private datePipe: DatePipe,
    public autoCodeService: AutoCodeService,
    private commonDataService: CommonService
  ) {
    this.getNumberRange();
  }

  ngOnInit(): void {
    this.createCoaForm();
    this.getCoaGroup();
    this.route.params.subscribe((param) => {
      if (param.id) {
        this.isUpdate = true;
        this.coaId = param.id;
        this.isCreate = false;
        this.coaForm.disable();
        this.getCAOInfo();
      }
    });
  }

  createCoaForm() {
    this.coaForm = this.fb.group({
      Id: [0],
      COATypeCOde: [''],
      COAGroup: [''],
      COATypeName: [''],
      ShortName: [''],
      Remarks: [''],
      CreatedDate: [new Date()],
      ModifiedDate: [new Date()],
      CreatedBy: [localStorage.getItem('UserID')],
      UpdatedBy: [localStorage.getItem('UserID')],
      Active: ['true']
    });
  }

  updateValue(){
    const userID = localStorage.getItem("UserID");
    const paylod = {
      userID: Number(userID),
      Ref_Application_Id: "4",
      SubfunctionID: 576
    }
    this.commonDataService.GetUserPermissionObject(paylod).subscribe(data => {
      debugger
      if (data.length > 0) {
        console.log("PermissionObject", data);

        if (data[0].SubfunctionID == paylod.SubfunctionID) {

          if (data[0].Update_Opt == 2) {
            this.coaForm.enable();
            this.isUpdateButtonDisable = false;
          } else {
            Swal.fire('Please Contact Administrator');
          }
        }
      } else {
        Swal.fire('Please Contact Administrator');
      }

    }, err => {
      console.log('errr----->', err.message);
    });
  }

  onBack() {
    this.router.navigate(['/views/coa-type/cao-type-view']);
  }

  onSubmit() {
    var validation = "";
    if (this.coaForm.value.COATypeCOde == "") {
      validation += "<span style='color:red;'>*</span> <span>Please Enter COA Type Code </span></br>"
    }
    if (this.coaForm.value.COAGroup == "") {
      validation += "<span style='color:red;'>*</span> <span>Please Enter COA Group</span></br>"
    }
    if (this.coaForm.value.COATypeName == "") {
      validation += "<span style='color:red;'>*</span> <span>Please Enter COA Type</span></br>"
    }
    if (this.coaForm.value.ShortName == "") {
      validation += "<span style='color:red;'>*</span> <span>Please Enter Short Name</span></br>"
    }
    // if (this.coaForm.value.Remarks == "") {
    //   validation += "<span style='color:red;'>*</span> <span>Please Enter Remarks</span></br>"
    // }

    if (validation != "") {
      Swal.fire(validation)
      return false;
    }

    this.customPayload()
    Swal.fire({
      showCloseButton: true,
      title: '',
      icon: 'question',
      text: 'Do you want to save this Details?',
      showCancelButton: true,
      confirmButtonText: 'Yes',
      cancelButtonText: 'No',
      reverseButtons: false,
      allowOutsideClick: false
    }).then((result) => {
      if (result.isConfirmed) {
        let service = `${this.globals.APIURL}/COAType/SaveCOAType`;
        this.dataService.post(service, this.payload).subscribe((result: any) => {
          Swal.fire(result.message, '', 'success');
          this.router.navigate(['/views/coa-type/cao-type-view']);
          if (!this.isUpdate) { this.updateAutoGenerated(); }
          this.coaForm.reset();
        }, error => {
          console.error(error);
        });
      } else {
      }
    });
  }

  updateAutoGenerated() {
    let Info = this.autoGenerateCodeList.filter(x => x.ObjectName == 'COA Type');
    if (Info.length > 0) {
      Info[0].NextNumber = Info[0].NextNumber + 1;
      let service = `${this.globals.APIURL}/COAType/UpdateAutoGenerateCOdeNextNumber`;
      this.dataService.post(service, { NumberRangeObject: { Table: [{ Id: Info[0].Id, NextNumber: Info[0].NextNumber }] } }).subscribe((result: any) => {
      }, error => {
        console.error(error);
      });
    }
  }

  customPayload() {
    this.payload = {
      COAType: {
        Table: [this.coaForm.value],
      }
    }
  }

  getCAOInfo() {
    debugger
    let service = `${this.globals.APIURL}/COAType/GetCOATypeById`;
    this.dataService.post(service, { Id: this.coaId }).subscribe((result: any) => {
      if (result.message == 'Success') {
        let info = result.data.Table[0];

        this.CreatedOn = this.datePipe.transform(info.CreatedDate, this.entityDateFormat);
        this.ModifiedOn = this.datePipe.transform(info.ModifiedDate, this.entityDateFormat);
        this.getUpdatedByRecord([info.CreatedBy, info.UpdatedBy])

        this.coaForm.patchValue({
          Id: info.ID,
          COATypeCOde: info.COATypeCOde,
          COAGroup: info.COAGroup,
          COATypeName: info.COATypeName,
          ShortName: info.ShortName,
          Remarks: info.Remarks,
          createdDate: info.createdDate,
          ModifiedDate: new Date(),
          CreatedBy: info.CreatedBy,
          UpdatedBy: localStorage.getItem('UserID'),
          Active: info.Active === true ? "YES" : "NO"
        });
      }
    }, error => {
      console.error(error);
    });
  }

  getCoaGroup() {
    let service = `${this.globals.APIURL}/COAType/GetCOAGroupList`;
    this.dataService.post(service, {}).subscribe((result: any) => {
      if (result.data.Table.length > 0) {
        this.coaGroupList = result.data.Table;
      }
    }, error => {
      console.error(error);
    });
  }


  getUpdatedByRecord(data: any) {
    var service = `${this.globals.APIURL}/UserApi/UserViewRecord`;
    this.dataService.post(service, { ID: data[0] }).subscribe((result: any) => {
      if (result.length > 0) {
        this.CreatedBy = result[0].UserName;
      }
    }, error => { });

    this.dataService.post(service, { ID: data[1] }).subscribe((result: any) => {
      if (result.length > 0) {
        this.ModifiedBy = result[0].UserName;
      }
    }, error => { });
  }

  getNumberRange() {
    let service = `${this.globals.APIURL}/COAType/GetNumberRangeCodeGenerator`;
    this.dataService.post(service, { Id: 0, ObjectId: 0 }).subscribe((result: any) => {
      if (result.message = "Success") {
        this.autoGenerateCodeList = [];
        if (result.data.Table.length > 0) {
          for (let data of result.data.Table) {
            data.EffectiveDate = this.datePipe.transform(data.EffectiveDate, 'YYYY-MM-dd');
          }
          this.autoGenerateCodeList = result.data.Table
        }
      }
    }, error => {
      console.error(error);
    });
  }

  async autoCodeGeneration(event: any) {
    if (event) {
      var Info = this.autoGenerateCodeList.filter(x => x.ObjectName == 'COA Type');
      if (!this.isUpdate) {
        if (Info.length > 0) {
          let sectionOrderInfo = await this.checkAutoSectionItem([{ sectionA: Info[0].SectionA }, { sectionB: Info[0].SectionB }, { sectionC: Info[0].SectionC }, { sectionD: Info[0].SectionD }], Info[0].NextNumber, event);
          let code = this.autoCodeService.NumberRange(Info[0], sectionOrderInfo.sectionA, sectionOrderInfo.sectionB, sectionOrderInfo.sectionC, sectionOrderInfo.sectionD);
          if (code) this.coaForm.controls['COATypeCOde'].setValue(code.trim().toUpperCase());
        }
        else {
          Swal.fire('Please create the auto-generation code for COA Type.')
        }
      }
    }
    else {
      this.coaForm.controls['COATypeCOde'].setValue('');
    }
  }

  checkAutoSectionItem(sectionInfo: any, runningNumber: any, COACode: string) {
    var sectionA = '';
    var sectionB = '';
    var sectionC = '';
    var sectionD = '';
    for (var i = 0; i < sectionInfo.length; i++) {
      var condition = i == 0 ? sectionInfo[i].sectionA : i == 1 ? sectionInfo[i].sectionB : i == 2 ? sectionInfo[i].sectionC : i == 3 ? sectionInfo[i].sectionD : sectionInfo[i].sectionD;
      switch (condition) {
        case 'Office Code (3 Chars)': i == 0 ? sectionA = COACode : i == 1 ? sectionB = COACode : i == 2 ? sectionC = COACode : i == 3 ? sectionD = COACode : ''; break;
        case 'Running Number (3 Chars)': i == 0 ? sectionA = runningNumber : i == 1 ? sectionB = runningNumber : i == 2 ? sectionC = runningNumber : i == 3 ? sectionD = runningNumber : ''; break;
        case 'Running Number (4 Chars)': i == 0 ? sectionA = runningNumber : i == 1 ? sectionB = runningNumber : i == 2 ? sectionC = runningNumber : i == 3 ? sectionD = runningNumber : ''; break;
        case 'Running Number (5 Chars)': i == 0 ? sectionA = runningNumber : i == 1 ? sectionB = runningNumber : i == 2 ? sectionC = runningNumber : i == 3 ? sectionD = runningNumber : ''; break;
        case 'Running Number (6 Chars)': i == 0 ? sectionA = runningNumber : i == 1 ? sectionB = runningNumber : i == 2 ? sectionC = runningNumber : i == 3 ? sectionD = runningNumber : ''; break;
        case 'Running Number (7 Chars)': i == 0 ? sectionA = runningNumber : i == 1 ? sectionB = runningNumber : i == 2 ? sectionC = runningNumber : i == 3 ? sectionD = runningNumber : ''; break;
        case 'Office Code (4 Chars)': i == 0 ? sectionA = COACode : i == 1 ? sectionB = COACode : i == 2 ? sectionC = COACode : i == 3 ? sectionD = COACode : ''; break;
        case 'Division Code (4 Chars)': i == 0 ? sectionA = '' : i == 1 ? sectionB = '' : i == 2 ? sectionC = '' : i == 3 ? sectionD = '' : ''; break;
        case 'Division Code (3 Chars)': i == 0 ? sectionA = '' : i == 1 ? sectionB = '' : i == 2 ? sectionC = '' : i == 3 ? sectionD = '' : ''; break;
        case 'FY (4 Char e.g. 2023)': i == 0 ? sectionA = '' : i == 1 ? sectionB = '' : i == 2 ? sectionC = '' : i == 3 ? sectionD = '' : ''; break;
        case 'FY (5 Char e.g. 22-23)': i == 0 ? sectionA = '' : i == 1 ? sectionB = '' : i == 2 ? sectionC = '' : i == 3 ? sectionD = '' : ''; break;
        case 'FY (6 Char e.g. FY2023)': i == 0 ? sectionA = '' : i == 1 ? sectionB = '' : i == 2 ? sectionC = '' : i == 3 ? sectionD = '' : ''; break;
        case 'FY (7 Char e.g. FY22-23)': i == 0 ? sectionA = '' : i == 1 ? sectionB = '' : i == 2 ? sectionC = '' : i == 3 ? sectionD = '' : ''; break;
        case 'POD Port Code (3 Char)': i == 0 ? sectionA = '' : i == 1 ? sectionB = '' : i == 2 ? sectionC = '' : i == 3 ? sectionD = '' : ''; break;
        case 'POFD Port Code (3 Char)': i == 0 ? sectionA = '' : i == 1 ? sectionB = '' : i == 2 ? sectionC = '' : i == 3 ? sectionD = '' : ''; break;
        default: break;
      }
    }
    return { sectionA: sectionA, sectionB: sectionB, sectionC: sectionC, sectionD: sectionD };
  }


}
